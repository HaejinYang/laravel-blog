services:
  # nginx
  web:
    image: nginx:1.27.4
    ports:
      - "${WEB_OUTER_PORT}:${WEB_INNER_PORT}"
    volumes:
      - ./nginx/conf.d/default.conf:/etc/nginx/conf.d/default.conf
    restart: always
  # php
  app:
    build:
      dockerfile: ./php/Dockerfile
      target: app_dev
    volumes:
      - /var/www/html/vendor # 익명 볼륨을 이용하여 venodr 디렉토리의 볼륨 마운팅을 하지 않는다.
      - ./:/var/www/html
    restart: always
  # mysql
  db:
    image: mysql:8.0
    volumes:
      - ./mysqldata:/var/lib/mysql # mysql 데이터가 저장되는 경로
    ports:
      - "${DB_OUTER_PORT}:${DB_PORT}"
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_DATABASE: ${DB_DATABASE}

  # redis
  # 아직 필요하지 않음

  # monitor
  prometheus:
    image: prom/prometheus
    container_name: prometheus
    volumes:
      - ./prometheus/config/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus/data:/prometheus
    ports:
      - "${PROMETHEUS_OUTER_PORT}:${PROMETHEUS_INNER_PORT}"
    command:
      - '--storage.tsdb.path=/prometheus' # 프로메테우스가 사용하는 tsdb의 경로를 지정한다
      - '--config.file=/etc/prometheus/prometheus.yml'
    restart: always
    depends_on:
      - node_exporter

  grafana:
    image: grafana/grafana
    container_name: grafana
    ports:
      - "${GRAFANA_OUTER_PORT}:${GRAFANA_INNER_PORT}"
    volumes:
      - ./grafana/data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    restart: always
    depends_on:
      - prometheus

  node_exporter:
    image: prom/node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)' # 불필요한 디렉토리 및 그 서브 디렉토리르 제외한다.
    ports:
      - "${NODE_EXPORTER_OUTER_PORT}:${NODE_EXPORTER_INNER_PORT}"
    restart: always
